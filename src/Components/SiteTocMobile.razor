@using BlakePlugin.DocsRenderer.Types
@using Microsoft.AspNetCore.Components.Routing
@using Blazicons

@if (Nodes?.Any() == true)
{
    <ul class="nav flex-column bdr-site-toc-mobile">
        @foreach (var node in Nodes)
        {
            var expanded = IsExpanded(node);
            var active = IsActive(node);
            var svg = IsExpanded(node) ? BootstrapIcon.ChevronDown : BootstrapIcon.ChevronRight;

            <li class="nav-item bdr-toc-item">
                @if (node.Children.Any())
                {
                    <div class="bdr-toc-row d-flex align-items-center @(active ? "active" : "")"
                         @onclick="() => ToggleExpanded(node.Slug)"
                         role="button"
                         tabindex="0"
                         aria-expanded="@expanded">
                        <Blazicon Svg="@svg" />
                        <span class="bdr-toc-link flex-grow-1" href="@node.Slug">
                            @node.Text
                        </span>
                    </div>
                }
                else
                {
                    <div class="bdr-toc-row @(active ? "active" : "")">
                        <NavLink class="bdr-toc-link" href="@node.Slug">
                            @node.Text
                        </NavLink>
                    </div>
                }

                @if (node.Children.Any() && expanded)
                {
                    <div class="bdr-toc-children ms-3 mt-2">
                        <SiteTocMobile Nodes="node.Children" ActiveSlug="ActiveSlug" ExpandedNodes="ExpandedNodes" />
                    </div>
                }
            </li>
        }
    </ul>
}


@code {
    [Parameter]
    public required List<TocNode> Nodes { get; set; }

    [Parameter]
    public required string ActiveSlug { get; set; }

    [Parameter]
    public HashSet<string> ExpandedNodes { get; set; } = new();

    private bool IsExpanded(TocNode node)
    {
        if (ExpandedNodes.Contains(node.Slug))
            return true;
            
        return !string.IsNullOrEmpty(ActiveSlug) &&
               (ActiveSlug.StartsWith(node.Slug, StringComparison.OrdinalIgnoreCase) ||
                node.Children.Any(child => IsActiveInSubtree(child, ActiveSlug)));
    }

    private bool IsActive(TocNode node) =>
        string.Equals(ActiveSlug, node.Slug, StringComparison.OrdinalIgnoreCase);

    private bool IsActiveInSubtree(TocNode node, string activeSlug)
    {
        if (string.Equals(activeSlug, node.Slug, StringComparison.OrdinalIgnoreCase))
            return true;
            
        return node.Children.Any(child => IsActiveInSubtree(child, activeSlug));
    }

    private void ToggleExpanded(string slug)
    {
        if (ExpandedNodes.Contains(slug))
            ExpandedNodes.Remove(slug);
        else
            ExpandedNodes.Add(slug);
            
        StateHasChanged();
    }
}
